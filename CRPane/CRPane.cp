// CRPane.cp#include <assert.h>#include "CRPane.h"CRPane::CRPane(LStream *inStream)	: LPane(inStream) {	inStream->ReadData(&mReps, sizeof(mReps));	inStream->ReadData(&mColor, sizeof(mColor));}/*void CRPane::DrawSelf() {	Rect frame;	SDimension16 size;	int i;		CalcLocalFrameRect(frame);	GetFrameSize(size);		::PenNormal();	::RGBForeColor(&mColor);		for (i = 0; i < mReps; i++) {		::FrameRect(&frame);		::InsetRect(&frame, size.width / (2 * mReps), size.height / (2 * mReps));	}}*/void CRPane::DrawSelf() {	Rect frame;	SDimension16 size;	int i, hSpace, vSpace;	double hAccum, vAccum;		CalcLocalFrameRect(frame);	GetFrameSize(size);		::PenNormal();	::RGBForeColor(&mColor);	for (hAccum = vAccum = i = 0; i < mReps; i++) {		hAccum -= hSpace = hAccum += size.width / (2.0 * mReps);		vAccum -= vSpace = vAccum += size.height / (2.0 * mReps);		::FrameRect(&frame);		::InsetRect(&frame, hSpace, vSpace);	}}void CRPane::ClickSelf(const SMouseDownEvent &inMouseDown) {	Rect frame;	SDimension16 size;	CalcLocalFrameRect(frame);	GetFrameSize(size);	int horizDelta = inMouseDown.whereLocal.h - (frame.left + size.width / 2);	int vertDelta = inMouseDown.whereLocal.v - (frame.top + size.height / 2);	MoveBy(2 * horizDelta, 2 * vertDelta, true);}